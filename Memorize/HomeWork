# Assignment I: Memorize
Required Tasks
1. Get the Memorize game working as demonstrated in lectures 1 and 2. Type in all the code. Do not copy/paste from anywhere.
 (  암기 게임을 강의 1과 2의 설명에 따라 작동시키세요. 모든 코드를 입력합니다. 복사/붙여넣지 마십시오. )
2. You can remove the ⊖ and ⊕ buttons at the bottom of the screen.
 ( 화면 하단에 있는 and, ⊕ 버튼을 제거할 수 있습니다. )
3. Add a title “Memorize!” to the top of the screen.
 ( 화면 상단에 "암기!"라는 제목을 추가합니다. )
4. Add at least 3 “theme choosing” buttons to your UI, each of which causes all of the cards to be replaced with new cards that contain emoji that match the chosen theme. You can use Vehicles from lecture as one of the 3 themes if you want to, but you are welcome to create 3 (or more) completely new themes.
 ( UI에 3개 이상의 "테마 선택" 버튼을 추가합니다. 각 버튼은 선택한 테마와 일치하는 이모지가 포함된 새 카드로 교체됩니다. 원하는 경우 강의 차량을 세 가지 테마 중 하나로 사용할 수 있지만, 완전히 새로운 테마를 3개 이상 만들어도 좋습니다. )
5. The number of cards in each of your 3 themes should be different, but in no case fewer than 8.
 ( 3가지 테마의 카드 수는 각각 달라야 하지만, 8개 이하여야 합니다. )
6. The cards that appear when a theme button is touched should be in an unpredictable (i.e. random) order. In other words, the cards should be shuffled each time a theme button is chosen.
 ( 테마 버튼을 눌렀을 때 나타나는 카드는 예측할 수 없는(예: 무작위) 순서로 되어 있어야 합니다. 즉, 테마 버튼을 선택할 때마다 카드를 섞어야 합니다. )
7. The theme-choosing buttons must include an image representing the theme and text describing the theme stacked on top of each other vertically.
 ( 테마 선택 버튼에는 테마를 나타내는 이미지와 테마를 설명하는 텍스트가 세로로 쌓여 있어야 합니다. )
8. The image portion of each of the theme-choosing buttons must be created using an SF Symbol which evokes the idea of the theme it chooses (like the car symbol and the Vehicles theme shown in the Screenshot section below).
 ( 각 테마 선택 버튼의 이미지 부분은 선택한 테마의 아이디어를 나타내는 SF 기호를 사용하여 만들어야 합니다(아래 스크린샷 섹션에 표시된 자동차 기호 및 차량 테마). )
9. Thetextdescriptionofthetheme-choosingbuttonsmustuseanoticeablysmallerfont than the font we chose for the emoji on the cards.
 ( 선택한 버튼의 텍스트 설명은 우리가 카드의 이모지로 선택한 글꼴보다 매우 작아야 합니다. )
10. Your UI should work in portrait or landscape on any iPhone. This probably will not require any work on your part (that’s part of the power of SwiftUI), but be sure to experiment with running on different simulators in Xcode to be sure.
 ( UI는 iPhone에서 세로 또는 가로로 작동합니다. 이것은 아마도 당신 쪽에서 어떠한 작업도 요구하지 않을 것입니다(스위프트의 능력의 일부입니다).UI) 그러나 Xcode의 다른 시뮬레이터에서 실행을 실험해 보십시오. )
